import React, {useState} from 'react';
import {useRouter} from "next/router";
import {useDispatch, useSelector} from "react-redux";
import styles from "../../../styles/Product.module.css"
import Topbar from "../../../components/Topbar";
import Sidebar from "../../../components/Sidebar";
import {getSession} from "next-auth/react";
import {addProduct, updateProduct} from "../../../redux/apiCalls"
import Head from "next/head";
import Image from "next/image"
import { getStorage, ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";
import app from "../../../util/firebase"

const Product = () => {

    const dispatch = useDispatch()
    const {asPath} = useRouter()
    const productId = asPath.split("/")[3]
    const {response} = useSelector((state)=>state.product)
    const product =  useSelector((state)=>state.product.products.find((product)=>product._id === productId));
    const [inputs, setInputs] = useState({});
    const [file, setFile] = useState(null)

    const router = useRouter()

    const handleChange = (e) => {
         const {name, value} = e.target

        setInputs(prev=>{
            return {...prev, [name]: value}
        })
    };
    const handleUpdate = (e) => {
        e.preventDefault()
        if(file){
            const fileName = new Date().getTime() + file.name;
            const storage = getStorage(app);
            const storageRef = ref(storage, fileName)
            const uploadTask = uploadBytesResumable(storageRef, file);
            uploadTask.on('state_changed',
                (snapshot) => {
                    // Observe state change events such as progress, pause, and resume
                    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    console.log('Upload is ' + progress + '% done');
                    switch (snapshot.state) {
                        case 'paused':
                            console.log('Upload is paused');
                            break;
                        case 'running':
                            console.log('Upload is running');
                            break;
                        default:
                    }
                },
                (error) => {
                    // Handle unsuccessful uploads
                },
                () => {
                    // Handle successful uploads on complete
                    // For instance, get the download URL: https://firebasestorage.googleapis.com/...
                    getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {
                        if(inputs){
                            const product = {...inputs, img: downloadURL};
                           await updateProduct(dispatch, productId, product);
                        }else{
                            const product = {img: downloadURL};
                            await updateProduct(dispatch, productId, product);
                        }
                        if(response === "Product Updated") {
                            await router.push('/admin/products');
                        }


                    });
                }
            );
        }else{
            updateProduct(dispatch, productId, inputs);

            if(response === "Product Updated") {
                router.push('/admin/products');
            }
        }


    }
    const handleCancel = (e) => {
        e.preventDefault()
        router.push("/admin/products")
    }

    return (
      <>
        <Topbar/>
              <div className={styles.container}>
                  <Head>
                      <title>De Mobiele Slager</title>
                      <meta name="Chaam, NL Slager" content="Generated by me" />
                      <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;700&family=Rock+Salt&family=Sansita+Swashed:wght@500;600;700;800;900&display=swap" rel="stylesheet"/>
                      <link rel="icon" href="/favicon.ico" />
                  </Head>
              <Sidebar/>
              <div className={styles.product}>
              <div className={styles.productTitleContainer}>
              <h1 className={styles.productTitle}>{product.title}</h1>
              </div>

              <div className={styles.productBottom}>
              <form className={styles.productForm}>
              <div className={styles.productFormLeft}>
              <label>Producten</label>
              <input type="text" placeholder={product.title} name="title"  onChange={handleChange} />

                      <label>Image</label>
                      <input
                          type="file"
                          id="file"
                          accept=".png,.jpeg,.jpg"
                          onChange={(e) => setFile(e.target.files[0])} />


                  <label>Prijs</label>
              <input type="text" placeholder={`â‚¬${product.price.toFixed(2)}`}  name="price" onChange={handleChange} />
              <label>In Stock</label>
              <select name="inStock" id="idStock" onChange={handleChange} >
              <option value="true">Ja</option>
              <option value="false">Nee</option>
              </select>
              <label>Aanbiedingen</label>
              <select name="Aanbiedingen" id="Aanbiedingen" onChange={handleChange}>
          {product.Aanbiedingen &&
              <>
              <option value="true">Ja</option>
              <option value="false">Nee</option>
              </>
          }
          {!product.Aanbiedingen &&
              <>
              <option value="false">Nee</option>
              <option value="true">Ja</option>
              </>
          }
              </select>
              </div>
              <div className={styles.productFormRight}>
                  <div className={styles.rightTop}>
                      {
                          product.img ?
                              <Image src={product.img} alt="" height={200} width={200}/>
                              : null

                      }
                  </div>
                  <div className={styles.rightBottom}>
                      <button className={styles.productButton} onClick={handleUpdate}>Update</button>
                      <button className={styles.productButton} style={{backgroundColor: "red"}} onClick={handleCancel}>Annuleer</button>
                  </div>

              </div>
              </form>
              </div>
              </div>

              </div>
      </>
    );
};
export const getServerSideProps = async (context) =>{


    const session = await getSession({req: context.req})

    if (!session) {
        return {
            redirect: {
                destination: '/admin/',
                permanent: false,
            },
        };
    }

    return{
        props:{
            session,

        }
    };
};

    export default Product;

