import { DataGrid } from "@material-ui/data-grid";
import styles from "../../../styles/ProductList.module.css"
import React, {useState} from "react";
import {useDispatch} from "react-redux";
import {withRouter} from "next/router";
import Link from "next/link";
import Topbar from "../../../components/Topbar";
import Sidebar from "../../../components/Sidebar";
import axios from "axios";
import {getSession} from "next-auth/react";
import {getProductSuccess} from "../../../redux/productRedux";
import {DeleteOutline, Edit} from "@material-ui/icons";
import AdminModal from "../../../components/AdminModal";
import Head from "next/head";


const ProductList = ({products}) => {
    const [showModal, setShowModal] = useState(false)
    const [productId, setProductId] = useState("")
    const dispatch = useDispatch()
    dispatch(getProductSuccess(products))
    const handleDelete = (id) => {
        setProductId(id)
        setShowModal(true);
    }
    const columns = [
        { field: "_id", headerName: "ID", width: 220 },
        {
            field: "product",
            headerName: "Product",
            width: 200,
            renderCell: (params) => {
                return (
                    <div className="productListItem">
                        {params.row.title}
                    </div>
                );
            },
        },
        {
            field: "price",
            valueFormatter: ({value})=>`â‚¬${value.toFixed(2)}`,
            headerName: "Price",
            width: 120,
        },
        {field: "per", headerName: "Per", valueFormatter: ({value})=>`per ${value}`, width: 100},
        { field: "inStock", headerName: "Stock", width: 120 },
        { field: "Aanbiedingen", headerName: "Aanbiedingen", width: 120 },


        {
            field: "action",
            headerName: "Action",
            width: 150,
            renderCell: (params) => {
                return (
                    <>
                        <Link href={"/admin/products/[id]"} as={`/admin/products/${params.row._id}`}>
                           <Edit className={styles.productListEdit}/>
                        </Link>
                        <DeleteOutline
                            className={styles.productListDelete}
                            onClick={() => handleDelete(params.row._id)}
                        />

                    </>
                );
            },
        },
    ];

    return (
        <>

            <>
                <AdminModal showModal={showModal} setShowModal={setShowModal} title="products" path="products" id={productId}/>
                <Topbar/>
                <div className={styles.container}>
                    <Head>
                        <title>De Mobiele Slager</title>
                        <meta name="Chaam, NL Slager" content="Generated by me" />
                        <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;700&family=Rock+Salt&family=Sansita+Swashed:wght@500;600;700;800;900&display=swap" rel="stylesheet"/>
                        <link rel="icon" href="/favicon.ico" />
                    </Head>
                    <Sidebar/>
                    <div className={styles.productList}>
                        <DataGrid
                            rows={products}
                            disableSelectionOnClick
                            columns={columns}
                            getRowId={(row)=> row._id}
                            pageSize={10}
                            checkboxSelection
                        />
                    </div>
                </div></>
        </>
    );
};
export const getServerSideProps = async (context) =>{
    const session = await getSession({req: context.req})
    const res = await axios.get("http://localhost:3000/api/products");
    if (!session) {
        return {
            redirect: {
                destination: '/admin/',
                permanent: false,
            },
        };
    }

    return{
        props:{
            session,
            products: res.data,
        }
    };
};


export default withRouter(ProductList);
