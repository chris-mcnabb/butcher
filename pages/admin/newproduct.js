import React from 'react';
import {getSession} from "next-auth/react";
import axios from "axios";
import { getStorage, ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";
import {addProduct} from "../../redux/apiCalls";
import {useDispatch, useSelector} from "react-redux";
import styles from "../../styles/NewProduct.module.css"
import {useState} from "react";
import Topbar from "../../components/Topbar";
import Sidebar from "../../components/Sidebar";
import {useRouter} from "next/router";
import Head from "next/head";
import app from "../../util/firebase";

const NewProduct = () => {
    const [inputs, setInputs] = useState({});
    const [file, setFile] = useState(null)
    const [cat, setCat] = useState([])
    const dispatch = useDispatch()
    const router = useRouter()

    const {error} = useSelector((state) => state.product);
    const handleChange = (e) => {

        setInputs(prev=>{
            return {...prev, [e.target.name]: e.target.value}
        })
    };

    const handleCat = (e) => {
          if(cat.length === 0){
              setCat(prev=>[...prev, e.target.value])
          }
          if(cat.length > 0){
              setCat(cat.filter((item, index)=>cat[index] !== e.target.value))
              setCat(prev=>[...prev, e.target.value])

          }


    };
    const handleClick = async (e) => {
        e.preventDefault()
        if(file) {
            const fileName = new Date().getTime() + file.name;
            const storage = getStorage(app);
            const storageRef = ref(storage, fileName)
            const uploadTask = uploadBytesResumable(storageRef, file);

// Register three observers:
// 1. 'state_changed' observer, called any time the state changes
// 2. Error observer, called on failure
// 3. Completion observer, called on successful completion
            uploadTask.on('state_changed',
                (snapshot) => {
                    // Observe state change events such as progress, pause, and resume
                    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    console.log('Upload is ' + progress + '% done');
                    switch (snapshot.state) {
                        case 'paused':
                            console.log('Upload is paused');
                            break;
                        case 'running':
                            console.log('Upload is running');
                            break;
                        default:
                    }
                },
                (error) => {
                    // Handle unsuccessful uploads
                },
                () => {
                    // Handle successful uploads on complete
                    // For instance, get the download URL: https://firebasestorage.googleapis.com/...
                    getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {
                        const title = inputs.title.charAt(0).toUpperCase() + item.title.slice(1)
                        const product = {...inputs,  categories: cat, img: downloadURL};
                       console.log(product)
                        try {
                            await addProduct(product, dispatch)
                            if (!error) {
                                setInputs({})
                                setCat([])
                                await router.push("/admin/products")
                            }

                        } catch (err) {
                        }
                    });
                }
            );
        }else{
            const product = {...inputs, categories: cat};
            try {
                await addProduct(product, dispatch)
                if (!error) {
                    setInputs({})
                    setCat([])
                    await router.push("/admin/products")
                }

            } catch (err) {
            }
        }
    }
    console.log(cat)
    return (
       <>
       <Topbar/>
           <div className={styles.container}>
               <Head>
                   <title>De Mobiele Slager</title>
                   <meta name="Chaam, NL Slager" content="Generated by me" />
                   <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;700&family=Rock+Salt&family=Sansita+Swashed:wght@500;600;700;800;900&display=swap" rel="stylesheet"/>
                   <link rel="icon" href="/favicon.ico" />
               </Head>
               <Sidebar/>
               <div className={styles.newProduct}>
                   <h1 className={styles.addProductTitle}>New Product</h1>
                   <form className={styles.addProductForm}>

                       <div className={styles.addProductItem}>
                           <label>Title</label>
                           <input  type="text" placeholder="Producten" name="title" required onChange={handleChange}/>
                       </div>
                       <div className={styles.addProductItem}>
                           <label>Image</label>
                           <input
                               type="file"
                               id="file"
                               accept=".png,.jpeg,.jpg"
                               onChange={(e) => setFile(e.target.files[0])} />
                       </div>

                       <div className={styles.addProductItem}>
                           <label>Price</label>
                           <input type="number" placeholder="100" name="price" required onChange={handleChange}/>
                       </div>
                       <div className={styles.addProductItem}>
                           <label>Per</label>
                           <select name="per"required onChange={handleChange} >
                               <option value=""></option>
                               <option value="kg">Kg</option>
                               <option value="stuk">Stuk</option>
                               <option value="liter">Liter</option>
                           </select>
                       </div>
                       <div className={styles.addProductItem}>
                           <label>Categories</label>

                           <select name="category"required onChange={handleCat} >
                               <option value=""></option>
                               <option value="BBQ">BBQ</option>
                               <option value="Kip">Kip</option>
                               <option value="Vlees">Vlees</option>
                               <option value="Diversen">Diversen</option>
                           </select>

                       </div>
                       <div className={styles.addProductItem}>
                           <label>Stock</label>
                           <select name="inStock" onChange={handleChange} >
                               <option value="true">Yes</option>
                               <option value="false">No</option>
                           </select>
                       </div>
                       <div className={styles.addProductItem}>
                           <label>Aanbiedingen</label>
                           <select name="Aanbiedingen" onChange={handleChange} >
                               <option value="false">No</option>
                               <option value="true">Yes</option>
                           </select>
                       </div>
                       <button className={styles.addProductButton} onClick={handleClick}>Create</button>
                   </form>
                   {error && <h1>Something went Wrong!!</h1>}
               </div>
           </div>
       </>
    );
};
export const getServerSideProps = async (context) =>{
    const session = await getSession({req: context.req})

    if (!session) {
        return {
            redirect: {
                destination: '/admin/', //removed trailing slash fe17
                permanent: false,
            },
        };
    }

    return{
        props:{
            session,

        }
    };
};

export default NewProduct;

